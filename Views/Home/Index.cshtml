@{
    ViewData["Title"] = "Home Page";
}
<div>
    <button type="button" id="startButton" disabled>Start</button>
    <button type="button" id="stopButton" disabled>Stop</button>
</div>

<img id="targetImage" src="/images/info.png" width="200" height="200" style="border: 1px solid black" />

<script src="https://cdn.jsdelivr.net/npm/@@aspnet/signalr@1.1.4/dist/browser/signalr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/msgpack5@4.2.1/dist/msgpack5.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@aspnet/signalr-protocol-msgpack@1.1.0/dist/browser/signalr-protocol-msgpack.min.js"></script>
<script>
let connection = new signalR.HubConnectionBuilder()
    .withUrl("/image-stream")
    .withHubProtocol(new signalR.protocols.msgpack.MessagePackHubProtocol())
    .build();

connection.on('NotifyStatusChange', newStatus => {
    const isPlaying = newStatus == 'streaming';
    document.getElementById('startButton').disabled = isPlaying;
    document.getElementById('stopButton').disabled = !isPlaying;
});

let previousObjectURL;
connection.on('ReceiveImage', data => {
    //Creo un blob a partire dai dati binari che ho ricevuto
    //La variabile data è di tipo Uint8Array
    const blob = new Blob([data], {type: "image/png"});
    
    //Creo un URL per il blob, così che si possa assegnare alla proprietà src di un elemento IMG
    const currentObjectURL = URL.createObjectURL(blob);
    document.getElementById('targetImage').src = currentObjectURL;

    //Dealloco l'URL generato precedentemente, così da evitare dei memory leak.
    if (previousObjectURL) {
        URL.revokeObjectURL(previousObjectURL);
    }

    //Conservo il riferimento all'URL che ho generato poco fa, così che lo si possa deallocare poi
    previousObjectURL = currentObjectURL;
});
 
connection.start();
</script>